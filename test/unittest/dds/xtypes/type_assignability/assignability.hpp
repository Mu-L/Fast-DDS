// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file assignability.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__PRIMITIVES_MUTABLE_ASSIGNABILITY_HPP
#define FAST_DDS_GENERATED__PRIMITIVES_MUTABLE_ASSIGNABILITY_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ASSIGNABILITY_SOURCE)
#define ASSIGNABILITY_DllAPI __declspec( dllexport )
#else
#define ASSIGNABILITY_DllAPI __declspec( dllimport )
#endif // ASSIGNABILITY_SOURCE
#else
#define ASSIGNABILITY_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ASSIGNABILITY_DllAPI
#endif // _WIN32

namespace DifferentNumberElements {

namespace Final {

/*!
 * @brief This class represents the structure OneElement defined by the user in the IDL file.
 * @ingroup assignability
 */
class OneElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OneElement()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OneElement()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            const OneElement& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            OneElement&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            const OneElement& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            OneElement&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OneElement& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OneElement& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure TwoElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class TwoElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TwoElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TwoElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            const TwoElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            TwoElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            const TwoElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            TwoElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TwoElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TwoElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};

};
/*!
 * @brief This class represents the structure ElementsTwo defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsTwo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsTwo()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsTwo()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            const ElementsTwo& x)
    {
                    m_b = x.m_b;

                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            ElementsTwo&& x) noexcept
    {
        m_b = x.m_b;
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            const ElementsTwo& x)
    {

                    m_b = x.m_b;

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            ElementsTwo&& x) noexcept
    {

        m_b = x.m_b;
        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsTwo& x) const
    {
        return (m_b == x.m_b &&
           m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsTwo& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int16_t m_b{0};
    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure ThreeElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class ThreeElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ThreeElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ThreeElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            const ThreeElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            ThreeElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            const ThreeElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            ThreeElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ThreeElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b &&
           m_s == x.m_s);
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ThreeElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};
    std::string m_s;

};
/*!
 * @brief This class represents the structure ElementsThree defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsThree
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsThree()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsThree()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            const ElementsThree& x)
    {
                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            ElementsThree&& x) noexcept
    {
        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            const ElementsThree& x)
    {

                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            ElementsThree&& x) noexcept
    {

        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsThree& x) const
    {
        return (m_a == x.m_a &&
           m_s == x.m_s &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsThree& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    std::string m_s;
    int16_t m_b{0};

};

} // namespace Final
namespace Appendable {

/*!
 * @brief This class represents the structure OneElement defined by the user in the IDL file.
 * @ingroup assignability
 */
class OneElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OneElement()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OneElement()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            const OneElement& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            OneElement&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            const OneElement& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            OneElement&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OneElement& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OneElement& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure TwoElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class TwoElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TwoElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TwoElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            const TwoElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            TwoElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            const TwoElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            TwoElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TwoElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TwoElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};

};
/*!
 * @brief This class represents the structure ElementsTwo defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsTwo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsTwo()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsTwo()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            const ElementsTwo& x)
    {
                    m_b = x.m_b;

                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            ElementsTwo&& x) noexcept
    {
        m_b = x.m_b;
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            const ElementsTwo& x)
    {

                    m_b = x.m_b;

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            ElementsTwo&& x) noexcept
    {

        m_b = x.m_b;
        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsTwo& x) const
    {
        return (m_b == x.m_b &&
           m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsTwo& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int16_t m_b{0};
    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure ThreeElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class ThreeElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ThreeElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ThreeElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            const ThreeElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            ThreeElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            const ThreeElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            ThreeElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ThreeElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b &&
           m_s == x.m_s);
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ThreeElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};
    std::string m_s;

};
/*!
 * @brief This class represents the structure ElementsThree defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsThree
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsThree()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsThree()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            const ElementsThree& x)
    {
                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            ElementsThree&& x) noexcept
    {
        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            const ElementsThree& x)
    {

                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            ElementsThree&& x) noexcept
    {

        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsThree& x) const
    {
        return (m_a == x.m_a &&
           m_s == x.m_s &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsThree& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    std::string m_s;
    int16_t m_b{0};

};

} // namespace Appendable
namespace Mutable {

/*!
 * @brief This class represents the structure OneElement defined by the user in the IDL file.
 * @ingroup assignability
 */
class OneElement
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OneElement()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OneElement()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            const OneElement& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement(
            OneElement&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            const OneElement& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OneElement that will be copied.
     */
    eProsima_user_DllExport OneElement& operator =(
            OneElement&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OneElement& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x OneElement object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OneElement& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure TwoElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class TwoElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TwoElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TwoElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            const TwoElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements(
            TwoElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            const TwoElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TwoElements that will be copied.
     */
    eProsima_user_DllExport TwoElements& operator =(
            TwoElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TwoElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x TwoElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TwoElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};

};
/*!
 * @brief This class represents the structure ElementsTwo defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsTwo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsTwo()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsTwo()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            const ElementsTwo& x)
    {
                    m_b = x.m_b;

                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo(
            ElementsTwo&& x) noexcept
    {
        m_b = x.m_b;
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            const ElementsTwo& x)
    {

                    m_b = x.m_b;

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsTwo that will be copied.
     */
    eProsima_user_DllExport ElementsTwo& operator =(
            ElementsTwo&& x) noexcept
    {

        m_b = x.m_b;
        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsTwo& x) const
    {
        return (m_b == x.m_b &&
           m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsTwo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsTwo& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int16_t m_b{0};
    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure ThreeElements defined by the user in the IDL file.
 * @ingroup assignability
 */
class ThreeElements
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ThreeElements()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ThreeElements()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            const ThreeElements& x)
    {
                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements(
            ThreeElements&& x) noexcept
    {
        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            const ThreeElements& x)
    {

                    m_a = x.m_a;

                    m_b = x.m_b;

                    m_s = x.m_s;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ThreeElements that will be copied.
     */
    eProsima_user_DllExport ThreeElements& operator =(
            ThreeElements&& x) noexcept
    {

        m_a = x.m_a;
        m_b = x.m_b;
        m_s = std::move(x.m_s);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ThreeElements& x) const
    {
        return (m_a == x.m_a &&
           m_b == x.m_b &&
           m_s == x.m_s);
    }

    /*!
     * @brief Comparison operator.
     * @param x ThreeElements object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ThreeElements& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }



private:

    int8_t m_a{0};
    int16_t m_b{0};
    std::string m_s;

};
/*!
 * @brief This class represents the structure ElementsThree defined by the user in the IDL file.
 * @ingroup assignability
 */
class ElementsThree
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ElementsThree()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ElementsThree()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            const ElementsThree& x)
    {
                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree(
            ElementsThree&& x) noexcept
    {
        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            const ElementsThree& x)
    {

                    m_a = x.m_a;

                    m_s = x.m_s;

                    m_b = x.m_b;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ElementsThree that will be copied.
     */
    eProsima_user_DllExport ElementsThree& operator =(
            ElementsThree&& x) noexcept
    {

        m_a = x.m_a;
        m_s = std::move(x.m_s);
        m_b = x.m_b;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ElementsThree& x) const
    {
        return (m_a == x.m_a &&
           m_s == x.m_s &&
           m_b == x.m_b);
    }

    /*!
     * @brief Comparison operator.
     * @param x ElementsThree object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ElementsThree& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }


    /*!
     * @brief This function copies the value in member s
     * @param _s New value to be copied in member s
     */
    eProsima_user_DllExport void s(
            const std::string& _s)
    {
        m_s = _s;
    }

    /*!
     * @brief This function moves the value in member s
     * @param _s New value to be moved in member s
     */
    eProsima_user_DllExport void s(
            std::string&& _s)
    {
        m_s = std::move(_s);
    }

    /*!
     * @brief This function returns a constant reference to member s
     * @return Constant reference to member s
     */
    eProsima_user_DllExport const std::string& s() const
    {
        return m_s;
    }

    /*!
     * @brief This function returns a reference to member s
     * @return Reference to member s
     */
    eProsima_user_DllExport std::string& s()
    {
        return m_s;
    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int16_t _b)
    {
        m_b = _b;
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int16_t b() const
    {
        return m_b;
    }

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int16_t& b()
    {
        return m_b;
    }



private:

    int8_t m_a{0};
    std::string m_s;
    int16_t m_b{0};

};

} // namespace Mutable

} // namespace DifferentNumberElements
namespace Primitives {

namespace Final {

/*!
 * @brief This class represents the structure Int8Struct defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            const Int8Struct& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            Int8Struct&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            const Int8Struct& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            Int8Struct&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure Int8Struct_eq defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct_eq
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct_eq()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct_eq()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct_eq that will be copied.
     */
    eProsima_user_DllExport Int8Struct_eq(
            const Int8Struct_eq& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct_eq that will be copied.
     */
    eProsima_user_DllExport Int8Struct_eq(
            Int8Struct_eq&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct_eq that will be copied.
     */
    eProsima_user_DllExport Int8Struct_eq& operator =(
            const Int8Struct_eq& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct_eq that will be copied.
     */
    eProsima_user_DllExport Int8Struct_eq& operator =(
            Int8Struct_eq&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct_eq object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct_eq& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct_eq object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct_eq& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};
/*!
 * @brief This class represents the structure Int8Struct_ne defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct_ne
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct_ne()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct_ne()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct_ne that will be copied.
     */
    eProsima_user_DllExport Int8Struct_ne(
            const Int8Struct_ne& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct_ne that will be copied.
     */
    eProsima_user_DllExport Int8Struct_ne(
            Int8Struct_ne&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct_ne that will be copied.
     */
    eProsima_user_DllExport Int8Struct_ne& operator =(
            const Int8Struct_ne& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct_ne that will be copied.
     */
    eProsima_user_DllExport Int8Struct_ne& operator =(
            Int8Struct_ne&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct_ne object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct_ne& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct_ne object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct_ne& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int16_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int16_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int16_t& a()
    {
        return m_a;
    }



private:

    int16_t m_a{0};

};

} // namespace Final
namespace Appendable {

/*!
 * @brief This class represents the structure Int8Struct defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            const Int8Struct& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            Int8Struct&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            const Int8Struct& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            Int8Struct&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};

} // namespace Appendable
namespace Mutable {

/*!
 * @brief This class represents the structure Int8Struct defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            const Int8Struct& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            Int8Struct&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            const Int8Struct& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            Int8Struct&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};

} // namespace Mutable

} // namespace Primitives

#endif // _FAST_DDS_GENERATED_PRIMITIVES_MUTABLE_ASSIGNABILITY_HPP_


