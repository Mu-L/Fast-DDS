// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file assignability.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__PRIMITIVES_ASSIGNABILITY_HPP
#define FAST_DDS_GENERATED__PRIMITIVES_ASSIGNABILITY_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ASSIGNABILITY_SOURCE)
#define ASSIGNABILITY_DllAPI __declspec( dllexport )
#else
#define ASSIGNABILITY_DllAPI __declspec( dllimport )
#endif // ASSIGNABILITY_SOURCE
#else
#define ASSIGNABILITY_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ASSIGNABILITY_DllAPI
#endif // _WIN32

namespace Primitives {

/*!
 * @brief This class represents the structure Int8Struct defined by the user in the IDL file.
 * @ingroup assignability
 */
class Int8Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Struct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Struct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            const Int8Struct& x)
    {
                    m_a = x.m_a;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct(
            Int8Struct&& x) noexcept
    {
        m_a = x.m_a;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            const Int8Struct& x)
    {

                    m_a = x.m_a;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Struct that will be copied.
     */
    eProsima_user_DllExport Int8Struct& operator =(
            Int8Struct&& x) noexcept
    {

        m_a = x.m_a;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Struct& x) const
    {
        return (m_a == x.m_a);
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Struct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int8_t _a)
    {
        m_a = _a;
    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int8_t a() const
    {
        return m_a;
    }

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int8_t& a()
    {
        return m_a;
    }



private:

    int8_t m_a{0};

};

} // namespace Primitives

#endif // _FAST_DDS_GENERATED_PRIMITIVES_ASSIGNABILITY_HPP_


